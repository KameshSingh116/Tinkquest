{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\tinkerquest\\\\Tinkquest\\\\frontend\\\\src\\\\context\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useMemo } from 'react';\nimport { createTheme, ThemeProvider as MUIThemeProvider } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [mode, setMode] = useState('light');\n  const toggleTheme = () => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n  const theme = useMemo(() => createTheme({\n    palette: {\n      mode,\n      ...(mode === 'light' ? {\n        // Light theme colors\n        primary: {\n          main: '#1976d2'\n        },\n        secondary: {\n          main: '#dc004e'\n        },\n        background: {\n          default: '#f5f5f5',\n          paper: '#ffffff'\n        }\n      } : {\n        // Dark theme colors\n        primary: {\n          main: '#90caf9'\n        },\n        secondary: {\n          main: '#f48fb1'\n        },\n        background: {\n          default: '#121212',\n          paper: '#1e1e1e'\n        }\n      })\n    }\n  }), [mode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      toggleTheme,\n      mode\n    },\n    children: /*#__PURE__*/_jsxDEV(MUIThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"u8zjN1kWJUDh6oH/uPWW9KokeTA=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useMemo","createTheme","ThemeProvider","MUIThemeProvider","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","children","_s2","mode","setMode","toggleTheme","prevMode","theme","palette","primary","main","secondary","background","default","paper","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/tinkerquest/Tinkquest/frontend/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useMemo } from 'react';\r\nimport { createTheme, ThemeProvider as MUIThemeProvider } from '@mui/material/styles';\r\n\r\ntype ThemeMode = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  toggleTheme: () => void;\r\n  mode: ThemeMode;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [mode, setMode] = useState<ThemeMode>('light');\r\n\r\n  const toggleTheme = () => {\r\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  const theme = useMemo(\r\n    () =>\r\n      createTheme({\r\n        palette: {\r\n          mode,\r\n          ...(mode === 'light'\r\n            ? {\r\n                // Light theme colors\r\n                primary: {\r\n                  main: '#1976d2',\r\n                },\r\n                secondary: {\r\n                  main: '#dc004e',\r\n                },\r\n                background: {\r\n                  default: '#f5f5f5',\r\n                  paper: '#ffffff',\r\n                },\r\n              }\r\n            : {\r\n                // Dark theme colors\r\n                primary: {\r\n                  main: '#90caf9',\r\n                },\r\n                secondary: {\r\n                  main: '#f48fb1',\r\n                },\r\n                background: {\r\n                  default: '#121212',\r\n                  paper: '#1e1e1e',\r\n                },\r\n              }),\r\n        },\r\n      }),\r\n    [mode]\r\n  );\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ toggleTheme, mode }}>\r\n      <MUIThemeProvider theme={theme}>{children}</MUIThemeProvider>\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAC3E,SAASC,WAAW,EAAEC,aAAa,IAAIC,gBAAgB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAStF,MAAMC,YAAY,gBAAGT,aAAa,CAA+BU,SAAS,CAAC;AAE3E,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGZ,UAAU,CAACQ,YAAY,CAAC;EACxC,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMN,aAAsD,GAAGA,CAAC;EAAEU;AAAS,CAAC,KAAK;EAAAC,GAAA;EACtF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAY,OAAO,CAAC;EAEpD,MAAMiB,WAAW,GAAGA,CAAA,KAAM;IACxBD,OAAO,CAAEE,QAAQ,IAAMA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EAClE,CAAC;EAED,MAAMC,KAAK,GAAGlB,OAAO,CACnB,MACEC,WAAW,CAAC;IACVkB,OAAO,EAAE;MACPL,IAAI;MACJ,IAAIA,IAAI,KAAK,OAAO,GAChB;QACE;QACAM,OAAO,EAAE;UACPC,IAAI,EAAE;QACR,CAAC;QACDC,SAAS,EAAE;UACTD,IAAI,EAAE;QACR,CAAC;QACDE,UAAU,EAAE;UACVC,OAAO,EAAE,SAAS;UAClBC,KAAK,EAAE;QACT;MACF,CAAC,GACD;QACE;QACAL,OAAO,EAAE;UACPC,IAAI,EAAE;QACR,CAAC;QACDC,SAAS,EAAE;UACTD,IAAI,EAAE;QACR,CAAC;QACDE,UAAU,EAAE;UACVC,OAAO,EAAE,SAAS;UAClBC,KAAK,EAAE;QACT;MACF,CAAC;IACP;EACF,CAAC,CAAC,EACJ,CAACX,IAAI,CACP,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEX,WAAW;MAAEF;IAAK,CAAE;IAAAF,QAAA,eAClDP,OAAA,CAACF,gBAAgB;MAACe,KAAK,EAAEA,KAAM;MAAAN,QAAA,EAAEA;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAmB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAE5B,CAAC;AAAClB,GAAA,CAjDWX,aAAsD;AAAA8B,EAAA,GAAtD9B,aAAsD;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}